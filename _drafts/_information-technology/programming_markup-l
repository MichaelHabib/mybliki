
= PlantUML Guide using Asciidoc
:toc:
:toclevel:2
http://plantuml.com/

== Class Diagrams


---
=== Simple Class Diagram Example
[plantuml,x,svg]
----
class ClassA {
 + PublicProperty
 # ProtectedProperty
 - Private Property

 + PublicMethod()
 # ProtectedMethod()
 - PrivateMethod()
}
class ClassB {

  + PublicMethod()
}
abstract class ClassC {

}
interface  ClassD {

}
class ClassS << (S,#FF7700) Singleton >>

ClassA --> ClassB : class to class relation.
ClassA::PublicMethod --> ClassC : method to class relation.
ClassA::ProtectedMethod -- ClassB::PublicMethod : method to method relation.

note right of ClassA:  A note added to the right of ClassA
note right of ClassC:  Abstract Class
note right of ClassD:  Interface
note right of ClassS:  Custom spot with custom background color & letter .

----
---


=== Full Demo
[plantuml,x,svg]
----
Class09 -- Class10
Class05 o-- Class06
Class03 *-- Class04
Class01 <|-- Class02
Class07 .. Class08

Class11 <|.. Class12
Class13 <-- Class14
Class15 <.. Class16
Class19 <--* Class20

Class21 #-- Class22
Class23 x-- Class24
Class25 }-- Class26
Class27 +-- Class28
Class29 ^-- Class30
----
---


=== Association
[plantuml,x,svg]
----
ClassA -- ClassB
note right of ClassA
  ClassA is associated with ClassB
  ---
  Binary association relates two typed instances.
  It is normally rendered as a solid line connecting two classifiers,
  or a solid line connecting a single classifier to itself
  (the two ends are distinct).
  The line may consist of one or more connected segments.
end note
----
---


=== Composite Aggregation (Composition)
[plantuml,x,svg]
----
ClassA --o ClassB
note right of ClassA
  ClassA associated with / containers one or more ClassB
  ---
  Composite aggregation (aka composition) is a "strong" form of aggregation.

  Composition is depicted as binary association decorated with a filled black diamond at the aggregate (composite) end.
end note
----
---

=== Ownership of Association End
- ToDo : No PlantUML option found for this type of association


[plantuml,x,svg]
----
ClassA -- ClassB
note right of ClassA
  ClassA associated with / containers one or more ClassB
  ---
  Ownership of association ends by an associated classifier may be indicated graphically
  by a small filled circle (aka dot). The dot is drawn at the point where line meets the classifier.
  It could be interpreted as showing that the model includes a property of the type
  represented by the classifier touched by the dot.
  This property is owned by the classifier at the other end.

end note
----
---

=== Class Extension
[plantuml,x,svg]
----
ClassA <|-- ClassB
note right of ClassA
  ClassB extends ClassA
  ---

end note
----
---

=== Dependency
[plantuml,x,svg]
----
ClassA <.. ClassB
note right of ClassA
  ClassB depends on  ClassA
  ---

end note
----
---

=== Usage Dependency (Creation)
[plantuml,x,svg]
----
ClassA <.. ClassB : creates
note right of ClassA
  ClassB creates ClassA
  ---

end note
----
---


=== Credits & Sources
- https://www.uml-diagrams.org/class-reference.html
- https://plantuml.com/class-diagram

=== Activity Diagrams
[cols=2]
|===

a|
[plantuml,x,svg]
----

start
while(WhileCondition) is (FALSE)
  :ProcessIfFalse;
endwhile (TRUE)

#lightgreen:continu1;

if(ConditionA) then (True)
  :ProcessForConA;
elseif(ConditionB) then (True)
  :ProcessForConB;
endif

#lightgreen:continue2;

repeat
  :ProcessToRepeat;
repeat while (RepeatConidition) is (TRUE)
-> FalseLabel;

#lightgreen:continue3;

if (ConA) then (Orange)
  -[#Orange,dotted]->
  :Process Orange;
elseif (ConB) then (GreenBold)
  -[#green,bold]->
  :Process GreenBold;
endif

#lightgreen:continue4;

repeat
  :StartProcessToRepeat;
  if (X > 10) then (TRUE)
    :print x is > 10;
    detach

  elseif (X < 10) then (TRUE)
    :print x is NOT > 10;
    detach

  else (Undefined)
  endif
repeat while (x == Undefined) is (TRUE)

end

----
a|
----

start
while(WhileCondition) is (FALSE)
  :ProcessIfFalse;
endwhile (TRUE)

#lightgreen:continu1;

if(ConditionA) then (True)
  :ProcessForConA;
elseif(ConditionB) then (True)
  :ProcessForConB;
endif

#lightgreen:continue2;

repeat
  :ProcessToRepeat;
repeat while (RepeatConidition) is (TRUE)
-> FalseLabel;

#lightgreen:continue3;

if (ConA) then (Orange)
  -[#Orange,dotted]->
  :Process Orange;
elseif (ConB) then (GreenBold)
  -[#green,bold]->
  :Process GreenBold;
endif

#lightgreen:continue4;

repeat
  :StartProcessToRepeat;
  if (X > 10) then (TRUE)
    :print x is > 10;
    detach

  elseif (X < 10) then (TRUE)
    :print x is NOT > 10;
    detach

  else (Undefined)
  endif
repeat while (x == Undefined) is (TRUE)

end

----

|===

[cols=2,separator="~"]
|===

a~
[plantuml,x,svg]
----
|Swim Lane 1|
start
:Step 1 in Lane 1;

|#eee|Swim Lane 2|
:Step 1 in Lane 2;

|Swim Lane 1|
:Step 2 in Lane 1;

|Swim Lane 2|
:Step 2 in Lane 2;
(A)
detach

|Swim Lane 3|
(A)
:Step 1 in Lane 3;

stop
----

a~
----
|Swim Lane 1|
start
:Step 1 in Lane 1;

|#eee|Swim Lane 2|
:Step 1 in Lane 2;

|Swim Lane 1|
:Step 2 in Lane 1;

|Swim Lane 2|
:Step 2 in Lane 2;
(A)
detach

|Swim Lane 3|
(A)
:Step 1 in Lane 3;

stop
----
|===
